/*
 * File: app/controller/Contacts.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('ExtMVC.controller.Contacts', {
    extend: 'Ext.app.Controller',

    models: [
        'Contact'
    ],
    stores: [
        'Contacts'
    ],
    views: [
        'contact.Grid',
        'contact.Edit'
    ],

    refs: [
        {
            ref: 'contactGrid',
            selector: 'contactgrid',
            xtype: 'gridpanel'
        }
    ],

    dblClickEdit: function(dataview, record, item, index, e, options) {
        //autoShow is already enabled
        var edit = Ext.create('ExtMVC.view.contact.Edit');

        if(record){
            edit.down('form').loadRecord(record);
        }
    },

    onButtonClickAdd: function(button, e, options) {
        this.dblClickEdit();
    },

    onButtonClickDelete: function(button, e, options) {
        var grid = this.getContactGrid(),
            record = grid.getSelectionModel().getSelection(), 
            store = this.getContactsStore();

        store.remove(record);
        store.sync({
            success : function() {
                store.load();
            }
        });
    },

    onButtonClickSave: function(button, e, options) {
        var win    = button.up('window'),
            form   = win.down('form'),
            record = form.getRecord(),
            values = form.getValues(),
            store = this.getContactsStore();

        var isNew = false;

        if (values.id > 0){
            record.set(values);
        } else{
            record = Ext.create('ExtMVC.model.Contact');
            record.set(values);
            store.add(record);
            isNew = true;
        }

        win.close();
        store.sync({
            success : function() {
                if (isNew){
                    store.load();
                }
            }
        });


    },

    onButtonClickCancel: function(button, e, options) {
        var win    = button.up('window'),
            form   = win.down('form');

        form.getForm().reset();

        win.close();
    },

    init: function(application) {
        this.control({
            "contactgrid dataview": {
                itemdblclick: this.dblClickEdit
            },
            "contactgrid button[action=add]": {
                click: this.onButtonClickAdd
            },
            "contactgrid button[action=delete]": {
                click: this.onButtonClickDelete
            },
            "contactform button[action=save]": {
                click: this.onButtonClickSave
            },
            "contactform button[action=cancel]": {
                click: this.onButtonClickCancel
            }
        });
    }

});
